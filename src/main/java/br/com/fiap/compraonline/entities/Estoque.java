package br.com.fiap.compraonline.entities;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalDate;

public class Estoque {
    int rowsAffected = 0;

    public void verificarCadastro(int rows) throws ExcecaoProdutos {
        if(rows <=0){
            throw new ExcecaoProdutos("O cadastro do produto falhou!");
        }
    }

    public void verificarDeletar(int rows) throws ExcecaoProdutos {
        if(rows <=0){
            throw new ExcecaoProdutos("Nenhum produto deletado!");
        }
    }

    public void verificarBusca(int rows) throws ExcecaoProdutos{
        if (rows != -1){
            throw new ExcecaoProdutos("A busca de produtos falhou!");
        }
    }

    // Chamando um formatador para usarmos no quesito data
    SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yyyy");

    // Função que usando dos códigos de banco de dados, cria a tabela estoque
    public void criarEstoque(String url, String user, String pass, String tableName) throws SQLException {
        String sql = "CREATE TABLE " + tableName + " (id NUMBER GENERATED BY DEFAULT AS IDENTITY, nome VARCHAR2(50), marca VARCHAR2(50), numero_serial NUMBER, preco NUMBER, quantidade NUMBER, preco_total NUMBER, dia DATE)";

        Connection connection = null;

        try{
            connection = DriverManager.getConnection(url, user, pass);
            Statement stmt = connection.createStatement();
            stmt.executeUpdate(sql);
            System.out.println("Tabela " + tableName + " criada com sucesso!");
        } catch(SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("Erro ao fechar conexão: " + e.getMessage());
                }
            }
        }
    }

    // Função usada para confirmar se a tabela já existe e assim não caindo no erro de criar duas vezes
    public boolean tabelaExiste(Connection connection, String tableName) throws SQLException {
        String sql = "SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, tableName.toUpperCase());
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        }
    }

    // Função que usaremos para cadastrar os produtos dentro do banco de dados
    public void cadastroProduto(String url, String user, String pass, String nome, String marca, String descricao, int numeroSerial, double preco, int quantidade) {

        String insertSQL = "INSERT INTO estoque (nome, marca, descricao, numero_serial, preco, quantidade, preco_total, dia) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        LocalDate dia = LocalDate.now();
        Date hoje = Date.valueOf(dia);

        Produto produto = new Produto(nome, marca, descricao, numeroSerial, preco, quantidade);

        CalculosEstoque calculos = new CalculosEstoque();

        try {

            if (quantidade <= 0) {

                throw new ExcecaoProdutos("A quantidade de itens não pode ser zero");

            } else {
                double precoTotal = calculos.calculoPrecoTotal(quantidade, preco);

                Connection connection = null;

                try {

                    connection = DriverManager.getConnection(url, user, pass);
                    PreparedStatement preparedStatement = connection.prepareStatement(insertSQL);

                    preparedStatement.setString(1, produto.getNome());
                    preparedStatement.setString(2, produto.getMarca());
                    preparedStatement.setString(3, produto.getDesricao());
                    preparedStatement.setInt(4, produto.getNumeroSerial());
                    preparedStatement.setDouble(5, produto.getPreco());
                    preparedStatement.setInt(6, produto.getQuant());
                    preparedStatement.setDouble(7, precoTotal);
                    preparedStatement.setDate(8, hoje);
                    preparedStatement.executeUpdate();

                    rowsAffected = preparedStatement.executeUpdate();

                    verificarCadastro(rowsAffected);


                    System.out.println("Cadastro realizado com sucesso");

                } catch (SQLException e) {
                    e.printStackTrace();
                } finally {
                    if (connection != null) {
                        try {
                            connection.close();
                        } catch (SQLException e) {
                            System.out.println("Erro ao fechar conexão: " + e.getMessage());
                        }
                    }
                }
            }

        } catch (ExcecaoProdutos e) {
            System.out.println("Erro Capturado: " + e.getMessage());

        } catch (Exception e) {
            System.out.println("Erro inesperádo: " + e.getMessage());
        }

    }

    // Função para exibir os itens dentro do estoque
    public void exibirEstoque(String url, String user, String pass) {

        String selectSQL = "SELECT * FROM estoque";

        Connection connection = null;

        try{

            connection = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = connection.prepareStatement(selectSQL);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String nome = resultSet.getString("nome");
                String marca = resultSet.getString("marca");
                int numeroSerial = resultSet.getInt("numero_serial");
                double preco = resultSet.getDouble("preco");
                int quantidade = resultSet.getInt("quantidade");
                String date = formatter.format(resultSet.getDate("dia"));
                System.out.println("Estoque: \n" + "ID: " + id + "\nNúmero Serial: " + numeroSerial + "\nNome: " + nome + "\nMarca: "+ marca + "\nPreço: R$" + preco + "\nQuantidade: " + quantidade + "\nDia do Cadastro: " + date + "\n\n");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("Erro ao fechar conexão: " + e.getMessage());
                }
            }
        }
    }

    // Função para exibirmos o histórico de um determinado produto
    public void exibirHistorico(String url, String user, String pass, String historicoNome, int historicoNumeroSerial) {

        String selectSQL = "SELECT nome, numero_serial, dia FROM estoque";

        Connection connection = null;

        try{

            connection = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = connection.prepareStatement(selectSQL);
            ResultSet resultSet = preparedStatement.executeQuery();


            String nome = resultSet.getString("nome");
            int numeroSerial = resultSet.getInt("numero_serial");
            String date = formatter.format(resultSet.getDate("dia"));

            rowsAffected = preparedStatement.executeUpdate();

            if(historicoNome.equals(nome) && historicoNumeroSerial == numeroSerial) {
                System.out.println("Histórico: \n" + "Nome:" + nome + " \nNúmero Serial: " + numeroSerial + " \nDia do Cadastro: " + date + " \n\n");
            } else {
                System.out.println("O produto não existe ou não tem histórico");
            }


        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("Erro ao fechar conexão: " + e.getMessage());
                }
            }
        }
    }

    // Função que oermite que nos busquemos um determinado produto dentro do banco de dados
    public void pesquisaEstoque(String url, String user, String pass, String buscaNome, int buscaNumeroSerial) {

        String selectSQL = "SELECT * FROM estoque";

        Connection connection = null;

        try{

            connection = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = connection.prepareStatement(selectSQL);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String nome = resultSet.getString("nome");
                String marca = resultSet.getString("marca");
                int numeroSerial = resultSet.getInt("numero_serial");
                double preco = resultSet.getDouble("preco");
                int quantidade = resultSet.getInt("quantidade");
                String date = formatter.format(resultSet.getDate("dia"));

                rowsAffected = preparedStatement.executeUpdate();

                verificarBusca(rowsAffected);

                if (buscaNome.equals(nome) && buscaNumeroSerial == numeroSerial) {
                    System.out.println("Resultado da busca: \n" + "ID:" + id + " \nNúmero Serial: " + numeroSerial + " \nNome:" + nome + " \nMarca: "+ marca + " \nPreço: R$" + preco + " \nQuantidade: " + quantidade + " \nDia do Cadastro: " + date + " \n\n");
                } else if(quantidade == 0) {
                    System.out.println("O produto está esgotado!");
                } else {
                    System.out.println("O estoque não possui esse produto!");
                }

            }
        } catch (SQLException | ExcecaoProdutos e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("Erro ao fechar conexão: " + e.getMessage());
                }
            }
        }
    }

    // Função que permite que deletemos um ou mais produtos do banco de dados
    public void deletarDadosEstoque(String url, String user, String pass, String deletaNome, int deletaNumeroSerial) {

        String deleteSQL = "DELETE FROM estoque WHERE nome = ? AND numero_serial = ?";

        Connection connection = null;

        try{

            connection = DriverManager.getConnection(url, user, pass);
            PreparedStatement preparedStatement = connection.prepareStatement(deleteSQL);


            preparedStatement.setString(1, deletaNome);
            preparedStatement.setInt(2, deletaNumeroSerial);

            rowsAffected = preparedStatement.executeUpdate();
            verificarDeletar(rowsAffected);

            if(rowsAffected == 1) {
                System.out.println("Produto deletado com sucesso!");
            } else if (rowsAffected > 1) {
                System.out.println("Produtos deletados com sucesso");
            } else {
                System.out.println("Nenhum produto encontrado para deletar!");
            }

        } catch (SQLException | ExcecaoProdutos e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    System.out.println("Erro ao fechar conexão: " + e.getMessage());
                }
            }
        }
    }
}
